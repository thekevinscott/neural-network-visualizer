{"version":3,"sources":["../node_modules/roughjs/bin/path.js","../node_modules/roughjs/bin/geometry.js","../node_modules/roughjs/bin/utils/hachure.js","../node_modules/roughjs/bin/fillers/filler-utils.js","../node_modules/roughjs/bin/fillers/hachure-filler.js","../node_modules/roughjs/bin/fillers/zigzag-filler.js","../node_modules/roughjs/bin/fillers/hatch-filler.js","../node_modules/roughjs/bin/fillers/dot-filler.js","../node_modules/roughjs/bin/fillers/filler.js","../node_modules/roughjs/bin/renderer.js","../node_modules/roughjs/bin/renderer-factory.js","../node_modules/roughjs/bin/generator-base.js","../node_modules/roughjs/bin/generator.js","../node_modules/roughjs/bin/canvas-base.js","../node_modules/roughjs/bin/canvas.js","../node_modules/roughjs/bin/generator-async.js","../node_modules/roughjs/bin/canvas-async.js","../node_modules/roughjs/bin/svg-base.js","../node_modules/roughjs/bin/svg.js","../node_modules/roughjs/bin/svg-async.js","../node_modules/roughjs/bin/rough.js","../node_modules/color-name/index.js","../node_modules/is-arrayish/index.js","../node_modules/simple-swizzle/index.js","../node_modules/color-string/index.js","../node_modules/color-convert/node_modules/color-name/index.js","../node_modules/color-convert/conversions.js","../node_modules/color-convert/route.js","../node_modules/color-convert/index.js","../node_modules/color/index.js","../dist/index.js","index.js"],"names":["isType","token","type","PARAMS","A","a","C","c","H","h","L","l","M","m","Q","q","S","s","T","t","V","v","Z","z","ParsedPath","constructor","d","COMMAND","NUMBER","EOD","segments","parseData","processPoints","tokenize","tokens","Array","match","substr","RegExp","$1","length","text","console","error","parseFloat","index","mode","param_length","params","i","numbeToken","segment","key","data","push","closed","_closed","toLowerCase","first","currentPoint","point","RoughPath","_position","_first","bezierReflectionPoint","quadReflectionPoint","parsed","linearPoints","_linearPoints","lp","points","setPosition","x","y","position","RoughArcConverter","from","to","radii","angle","largeArcFlag","sweepFlag","_segIndex","_numSegs","_rx","_ry","_sinPhi","_cosPhi","_C","_theta","_delta","_T","_from","radPerDeg","Math","PI","abs","sin","cos","x1dash","y1dash","root","numerator","sqrt","cxdash","cydash","calculateVectorAngle","dtheta","ceil","getNextSegment","cosTheta1","sinTheta1","theta2","cosTheta2","sinTheta2","cp1","cp2","ux","uy","vx","vy","ta","atan2","tb","PathFitter","sets","fit","simplification","outSets","set","estLength","floor","reduce","distance","p1","p2","pow","count","slice","areas","minArea","minIndex","b","area","splice","Segment","xi","Number","MAX_VALUE","yi","px1","py1","px2","py2","_undefined","isUndefined","intersects","otherSegment","grad1","grad2","int1","int2","min","max","HachureIterator","top","bottom","left","right","gap","sinAngle","cosAngle","tanAngle","deltaX","hGap","pos","sLeft","sRight","nextLine","line","xLower","xUpper","yLower","yUpper","lineLength","getIntersectingLines","intersections","s1","s2","affine","cx","cy","sinAnglePrime","cosAnglePrime","R","hachureLinesForPolygon","o","ret","hachureAngle","hachureGap","strokeWidth","tan","it","rect","lines","hachureLinesForEllipse","width","height","renderer","rx","ry","getOffset","fweight","fillWeight","aspectRatio","hyp","gapPrime","halfLen","xPos","HachureFiller","fillPolygon","_fillPolygon","fillEllipse","_fillEllipse","connectEnds","ops","renderLines","prevPoint","concat","doubleLine","ZigZagFiller","HatchFiller","o2","Object","assign","set2","DotFiller","curveStepCount","dotsOnLines","dl","alpha","atan","dy","dx","ellipse","fillers","getFiller","fillerName","fillStyle","RoughRenderer","x1","y1","x2","y2","linearPath","close","len","polygon","rectangle","curve","o1","_curveWithOffset","roughness","increment","_ellipse","arc","start","stop","roughClosure","strt","stp","ellipseInc","arcInc","_arc","op","svgPath","path","replace","p","fitter","prev","opList","_processSegment","solidFillPolygon","offset","maxRandomnessOffset","patternFillPolygon","filler","patternFillEllipse","patternFillArc","random","_line","move","overlay","lengthSq","halfOffset","divergePoint","midDispX","bowing","midDispY","_curve","closePoint","curveTightness","cachedVertArray","ro","overlap","radOffset","ps","_bezierTo","ros","f","seg","prevSeg","delta","ob","prevKey","ref","offset1","offset2","arcConverter","hasSelf","self","roughScript","document","currentScript","src","createRenderer","config","workly","async","noWorker","worklySource","worklyURL","code","ourl","URL","createObjectURL","Blob","proxy","RoughGeneratorBase","surface","defaultOptions","stroke","options","_options","_drawable","shape","lib","getCanvasSize","val","w","baseVal","value","computePolygonSize","polygonPath","computePathSize","size","ns","svg","createElementNS","setAttribute","pathNode","appendChild","body","bb","getBBox","removeChild","err","canvasSize","toPaths","drawable","paths","drawing","opsToPath","fill","fillSketch","pattern","viewBox","round","patternUnits","item","trim","RoughGenerator","circle","diameter","fillPoints","hasDocument","RoughCanvasBase","canvas","ctx","getContext","draw","getDefaultOptions","save","strokeStyle","lineWidth","_drawToContext","restore","p2d","Path2D","doc","ownerDocument","hcanvas","createElement","hcontext","bbox","computeBBox","translate","createPattern","beginPath","moveTo","bezierCurveTo","quadraticCurveTo","lineTo","RoughCanvas","gen","generator","RoughGeneratorAsync","RoughCanvasAsync","genAsync","RoughSVGBase","defs","_defs","dnode","firstChild","insertBefore","g","style","id","MAX_SAFE_INTEGER","patternPath","RoughSVG","RoughSVGAsync","NNVisualizer","__assign","n","arguments","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","getLines","_a","layer","cells","previousLayerCells","j","cell","Color","require","COLORS","hsl","DEFAULT_DIAMETER","EXTRA_PADDING","DEFAULT_FILL","DEFAULT_FILL_WEIGHT","DEFAULT_FILL_STYLE","DEFAULT_STROKE_WIDTH","DEFAULT_LINE_WIDTH","DEFAULT_ROUGHNESS","DEFAULT_BOWING","getPosition","getRange","num","orig","target","perc","getCellPosition","maxCells","vertical","layerPosition","layerSize","units","extraAmount","pad","getCells","props","getLayer","_b","parseInt","getCellsAndLines","network","layers","lastLayer","end","obj","parseProps","map","_this","animating","render","rc","rough","forEach","animate","animateInterval","getRand","setInterval","stopAnimating","parsedProps","range","getElementById","nn"],"mappings":"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","file":"example.17f406b0.map","sourceRoot":"..","sourcesContent":["function isType(token, type) {\n    return token.type === type;\n}\nconst PARAMS = {\n    A: 7,\n    a: 7,\n    C: 6,\n    c: 6,\n    H: 1,\n    h: 1,\n    L: 2,\n    l: 2,\n    M: 2,\n    m: 2,\n    Q: 4,\n    q: 4,\n    S: 4,\n    s: 4,\n    T: 4,\n    t: 2,\n    V: 1,\n    v: 1,\n    Z: 0,\n    z: 0\n};\nclass ParsedPath {\n    constructor(d) {\n        this.COMMAND = 0;\n        this.NUMBER = 1;\n        this.EOD = 2;\n        this.segments = [];\n        this.parseData(d);\n        this.processPoints();\n    }\n    tokenize(d) {\n        const tokens = new Array();\n        while (d !== '') {\n            if (d.match(/^([ \\t\\r\\n,]+)/)) {\n                d = d.substr(RegExp.$1.length);\n            }\n            else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {\n                tokens[tokens.length] = { type: this.COMMAND, text: RegExp.$1 };\n                d = d.substr(RegExp.$1.length);\n            }\n            else if (d.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {\n                tokens[tokens.length] = { type: this.NUMBER, text: `${parseFloat(RegExp.$1)}` };\n                d = d.substr(RegExp.$1.length);\n            }\n            else {\n                console.error('Unrecognized segment command: ' + d);\n                return [];\n            }\n        }\n        tokens[tokens.length] = { type: this.EOD, text: '' };\n        return tokens;\n    }\n    parseData(d) {\n        const tokens = this.tokenize(d);\n        let index = 0;\n        let token = tokens[index];\n        let mode = 'BOD';\n        this.segments = new Array();\n        while (!isType(token, this.EOD)) {\n            let param_length;\n            const params = new Array();\n            if (mode === 'BOD') {\n                if (token.text === 'M' || token.text === 'm') {\n                    index++;\n                    param_length = PARAMS[token.text];\n                    mode = token.text;\n                }\n                else {\n                    this.parseData('M0,0' + d);\n                    return;\n                }\n            }\n            else {\n                if (isType(token, this.NUMBER)) {\n                    param_length = PARAMS[mode];\n                }\n                else {\n                    index++;\n                    param_length = PARAMS[token.text];\n                    mode = token.text;\n                }\n            }\n            if ((index + param_length) < tokens.length) {\n                for (let i = index; i < index + param_length; i++) {\n                    const numbeToken = tokens[i];\n                    if (isType(numbeToken, this.NUMBER)) {\n                        params[params.length] = +numbeToken.text;\n                    }\n                    else {\n                        console.error('Parameter type is not a number: ' + mode + ',' + numbeToken.text);\n                        return;\n                    }\n                }\n                if (typeof PARAMS[mode] === 'number') {\n                    const segment = { key: mode, data: params };\n                    this.segments.push(segment);\n                    index += param_length;\n                    token = tokens[index];\n                    if (mode === 'M')\n                        mode = 'L';\n                    if (mode === 'm')\n                        mode = 'l';\n                }\n                else {\n                    console.error('Unsupported segment type: ' + mode);\n                    return;\n                }\n            }\n            else {\n                console.error('Path data ended before all parameters were found');\n            }\n        }\n    }\n    get closed() {\n        if (typeof this._closed === 'undefined') {\n            this._closed = false;\n            for (const s of this.segments) {\n                if (s.key.toLowerCase() === 'z') {\n                    this._closed = true;\n                }\n            }\n        }\n        return this._closed;\n    }\n    processPoints() {\n        let first = null;\n        let currentPoint = [0, 0];\n        for (let i = 0; i < this.segments.length; i++) {\n            const s = this.segments[i];\n            switch (s.key) {\n                case 'M':\n                case 'L':\n                case 'T':\n                    s.point = [s.data[0], s.data[1]];\n                    break;\n                case 'm':\n                case 'l':\n                case 't':\n                    s.point = [s.data[0] + currentPoint[0], s.data[1] + currentPoint[1]];\n                    break;\n                case 'H':\n                    s.point = [s.data[0], currentPoint[1]];\n                    break;\n                case 'h':\n                    s.point = [s.data[0] + currentPoint[0], currentPoint[1]];\n                    break;\n                case 'V':\n                    s.point = [currentPoint[0], s.data[0]];\n                    break;\n                case 'v':\n                    s.point = [currentPoint[0], s.data[0] + currentPoint[1]];\n                    break;\n                case 'z':\n                case 'Z':\n                    if (first) {\n                        s.point = [first[0], first[1]];\n                    }\n                    break;\n                case 'C':\n                    s.point = [s.data[4], s.data[5]];\n                    break;\n                case 'c':\n                    s.point = [s.data[4] + currentPoint[0], s.data[5] + currentPoint[1]];\n                    break;\n                case 'S':\n                    s.point = [s.data[2], s.data[3]];\n                    break;\n                case 's':\n                    s.point = [s.data[2] + currentPoint[0], s.data[3] + currentPoint[1]];\n                    break;\n                case 'Q':\n                    s.point = [s.data[2], s.data[3]];\n                    break;\n                case 'q':\n                    s.point = [s.data[2] + currentPoint[0], s.data[3] + currentPoint[1]];\n                    break;\n                case 'A':\n                    s.point = [s.data[5], s.data[6]];\n                    break;\n                case 'a':\n                    s.point = [s.data[5] + currentPoint[0], s.data[6] + currentPoint[1]];\n                    break;\n            }\n            if (s.key === 'm' || s.key === 'M') {\n                first = null;\n            }\n            if (s.point) {\n                currentPoint = s.point;\n                if (!first) {\n                    first = s.point;\n                }\n            }\n            if (s.key === 'z' || s.key === 'Z') {\n                first = null;\n            }\n        }\n    }\n}\nexport class RoughPath {\n    constructor(d) {\n        this._position = [0, 0];\n        this._first = null;\n        this.bezierReflectionPoint = null;\n        this.quadReflectionPoint = null;\n        this.parsed = new ParsedPath(d);\n    }\n    get segments() {\n        return this.parsed.segments;\n    }\n    get closed() {\n        return this.parsed.closed;\n    }\n    get linearPoints() {\n        if (!this._linearPoints) {\n            const lp = [];\n            let points = [];\n            for (const s of this.parsed.segments) {\n                const key = s.key.toLowerCase();\n                if (key === 'm' || key === 'z') {\n                    if (points.length) {\n                        lp.push(points);\n                        points = [];\n                    }\n                    if (key === 'z') {\n                        continue;\n                    }\n                }\n                if (s.point) {\n                    points.push(s.point);\n                }\n            }\n            if (points.length) {\n                lp.push(points);\n                points = [];\n            }\n            this._linearPoints = lp;\n        }\n        return this._linearPoints;\n    }\n    get first() {\n        return this._first;\n    }\n    set first(v) {\n        this._first = v;\n    }\n    setPosition(x, y) {\n        this._position = [x, y];\n        if (!this._first) {\n            this._first = [x, y];\n        }\n    }\n    get position() {\n        return this._position;\n    }\n    get x() {\n        return this._position[0];\n    }\n    get y() {\n        return this._position[1];\n    }\n}\n// Algorithm as described in https://www.w3.org/TR/SVG/implnote.html\n// Code adapted from nsSVGPathDataParser.cpp in Mozilla \n// https://hg.mozilla.org/mozilla-central/file/17156fbebbc8/content/svg/content/src/nsSVGPathDataParser.cpp#l887\nexport class RoughArcConverter {\n    constructor(from, to, radii, angle, largeArcFlag, sweepFlag) {\n        this._segIndex = 0;\n        this._numSegs = 0;\n        this._rx = 0;\n        this._ry = 0;\n        this._sinPhi = 0;\n        this._cosPhi = 0;\n        this._C = [0, 0];\n        this._theta = 0;\n        this._delta = 0;\n        this._T = 0;\n        this._from = from;\n        if (from[0] === to[0] && from[1] === to[1]) {\n            return;\n        }\n        const radPerDeg = Math.PI / 180;\n        this._rx = Math.abs(radii[0]);\n        this._ry = Math.abs(radii[1]);\n        this._sinPhi = Math.sin(angle * radPerDeg);\n        this._cosPhi = Math.cos(angle * radPerDeg);\n        const x1dash = this._cosPhi * (from[0] - to[0]) / 2.0 + this._sinPhi * (from[1] - to[1]) / 2.0;\n        const y1dash = -this._sinPhi * (from[0] - to[0]) / 2.0 + this._cosPhi * (from[1] - to[1]) / 2.0;\n        let root = 0;\n        const numerator = this._rx * this._rx * this._ry * this._ry - this._rx * this._rx * y1dash * y1dash - this._ry * this._ry * x1dash * x1dash;\n        if (numerator < 0) {\n            const s = Math.sqrt(1 - (numerator / (this._rx * this._rx * this._ry * this._ry)));\n            this._rx = this._rx * s;\n            this._ry = this._ry * s;\n            root = 0;\n        }\n        else {\n            root = (largeArcFlag === sweepFlag ? -1.0 : 1.0) *\n                Math.sqrt(numerator / (this._rx * this._rx * y1dash * y1dash + this._ry * this._ry * x1dash * x1dash));\n        }\n        const cxdash = root * this._rx * y1dash / this._ry;\n        const cydash = -root * this._ry * x1dash / this._rx;\n        this._C = [0, 0];\n        this._C[0] = this._cosPhi * cxdash - this._sinPhi * cydash + (from[0] + to[0]) / 2.0;\n        this._C[1] = this._sinPhi * cxdash + this._cosPhi * cydash + (from[1] + to[1]) / 2.0;\n        this._theta = this.calculateVectorAngle(1.0, 0.0, (x1dash - cxdash) / this._rx, (y1dash - cydash) / this._ry);\n        let dtheta = this.calculateVectorAngle((x1dash - cxdash) / this._rx, (y1dash - cydash) / this._ry, (-x1dash - cxdash) / this._rx, (-y1dash - cydash) / this._ry);\n        if ((!sweepFlag) && (dtheta > 0)) {\n            dtheta -= 2 * Math.PI;\n        }\n        else if (sweepFlag && (dtheta < 0)) {\n            dtheta += 2 * Math.PI;\n        }\n        this._numSegs = Math.ceil(Math.abs(dtheta / (Math.PI / 2)));\n        this._delta = dtheta / this._numSegs;\n        this._T = (8 / 3) * Math.sin(this._delta / 4) * Math.sin(this._delta / 4) / Math.sin(this._delta / 2);\n    }\n    getNextSegment() {\n        if (this._segIndex === this._numSegs) {\n            return null;\n        }\n        const cosTheta1 = Math.cos(this._theta);\n        const sinTheta1 = Math.sin(this._theta);\n        const theta2 = this._theta + this._delta;\n        const cosTheta2 = Math.cos(theta2);\n        const sinTheta2 = Math.sin(theta2);\n        const to = [\n            this._cosPhi * this._rx * cosTheta2 - this._sinPhi * this._ry * sinTheta2 + this._C[0],\n            this._sinPhi * this._rx * cosTheta2 + this._cosPhi * this._ry * sinTheta2 + this._C[1]\n        ];\n        const cp1 = [\n            this._from[0] + this._T * (-this._cosPhi * this._rx * sinTheta1 - this._sinPhi * this._ry * cosTheta1),\n            this._from[1] + this._T * (-this._sinPhi * this._rx * sinTheta1 + this._cosPhi * this._ry * cosTheta1)\n        ];\n        const cp2 = [\n            to[0] + this._T * (this._cosPhi * this._rx * sinTheta2 + this._sinPhi * this._ry * cosTheta2),\n            to[1] + this._T * (this._sinPhi * this._rx * sinTheta2 - this._cosPhi * this._ry * cosTheta2)\n        ];\n        this._theta = theta2;\n        this._from = [to[0], to[1]];\n        this._segIndex++;\n        return {\n            cp1: cp1,\n            cp2: cp2,\n            to: to\n        };\n    }\n    calculateVectorAngle(ux, uy, vx, vy) {\n        const ta = Math.atan2(uy, ux);\n        const tb = Math.atan2(vy, vx);\n        if (tb >= ta)\n            return tb - ta;\n        return 2 * Math.PI - (ta - tb);\n    }\n}\nexport class PathFitter {\n    constructor(sets, closed) {\n        this.sets = sets;\n        this.closed = closed;\n    }\n    fit(simplification) {\n        const outSets = [];\n        for (const set of this.sets) {\n            const length = set.length;\n            let estLength = Math.floor(simplification * length);\n            if (estLength < 5) {\n                if (length <= 5) {\n                    continue;\n                }\n                estLength = 5;\n            }\n            outSets.push(this.reduce(set, estLength));\n        }\n        let d = '';\n        for (const set of outSets) {\n            for (let i = 0; i < set.length; i++) {\n                const point = set[i];\n                if (i === 0) {\n                    d += 'M' + point[0] + ',' + point[1];\n                }\n                else {\n                    d += 'L' + point[0] + ',' + point[1];\n                }\n            }\n            if (this.closed) {\n                d += 'z ';\n            }\n        }\n        return d;\n    }\n    distance(p1, p2) {\n        return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n    }\n    reduce(set, count) {\n        if (set.length <= count) {\n            return set;\n        }\n        const points = set.slice(0);\n        while (points.length > count) {\n            const areas = [];\n            let minArea = -1;\n            let minIndex = -1;\n            for (let i = 1; i < (points.length - 1); i++) {\n                const a = this.distance(points[i - 1], points[i]);\n                const b = this.distance(points[i], points[i + 1]);\n                const c = this.distance(points[i - 1], points[i + 1]);\n                const s = (a + b + c) / 2.0;\n                const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n                areas.push(area);\n                if ((minArea < 0) || (area < minArea)) {\n                    minArea = area;\n                    minIndex = i;\n                }\n            }\n            if (minIndex > 0) {\n                points.splice(minIndex, 1);\n            }\n            else {\n                break;\n            }\n        }\n        return points;\n    }\n}\n","export class Segment {\n    constructor(p1, p2) {\n        this.xi = Number.MAX_VALUE;\n        this.yi = Number.MAX_VALUE;\n        this.px1 = p1[0];\n        this.py1 = p1[1];\n        this.px2 = p2[0];\n        this.py2 = p2[1];\n        this.a = this.py2 - this.py1;\n        this.b = this.px1 - this.px2;\n        this.c = this.px2 * this.py1 - this.px1 * this.py2;\n        this._undefined = ((this.a === 0) && (this.b === 0) && (this.c === 0));\n    }\n    isUndefined() {\n        return this._undefined;\n    }\n    intersects(otherSegment) {\n        if (this.isUndefined() || otherSegment.isUndefined()) {\n            return false;\n        }\n        let grad1 = Number.MAX_VALUE;\n        let grad2 = Number.MAX_VALUE;\n        let int1 = 0, int2 = 0;\n        const a = this.a, b = this.b, c = this.c;\n        if (Math.abs(b) > 0.00001) {\n            grad1 = -a / b;\n            int1 = -c / b;\n        }\n        if (Math.abs(otherSegment.b) > 0.00001) {\n            grad2 = -otherSegment.a / otherSegment.b;\n            int2 = -otherSegment.c / otherSegment.b;\n        }\n        if (grad1 === Number.MAX_VALUE) {\n            if (grad2 === Number.MAX_VALUE) {\n                if ((-c / a) !== (-otherSegment.c / otherSegment.a)) {\n                    return false;\n                }\n                if ((this.py1 >= Math.min(otherSegment.py1, otherSegment.py2)) && (this.py1 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n                    this.xi = this.px1;\n                    this.yi = this.py1;\n                    return true;\n                }\n                if ((this.py2 >= Math.min(otherSegment.py1, otherSegment.py2)) && (this.py2 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n                    this.xi = this.px2;\n                    this.yi = this.py2;\n                    return true;\n                }\n                return false;\n            }\n            this.xi = this.px1;\n            this.yi = (grad2 * this.xi + int2);\n            if (((this.py1 - this.yi) * (this.yi - this.py2) < -0.00001) || ((otherSegment.py1 - this.yi) * (this.yi - otherSegment.py2) < -0.00001)) {\n                return false;\n            }\n            if (Math.abs(otherSegment.a) < 0.00001) {\n                if ((otherSegment.px1 - this.xi) * (this.xi - otherSegment.px2) < -0.00001) {\n                    return false;\n                }\n                return true;\n            }\n            return true;\n        }\n        if (grad2 === Number.MAX_VALUE) {\n            this.xi = otherSegment.px1;\n            this.yi = grad1 * this.xi + int1;\n            if (((otherSegment.py1 - this.yi) * (this.yi - otherSegment.py2) < -0.00001) || ((this.py1 - this.yi) * (this.yi - this.py2) < -0.00001)) {\n                return false;\n            }\n            if (Math.abs(a) < 0.00001) {\n                if ((this.px1 - this.xi) * (this.xi - this.px2) < -0.00001) {\n                    return false;\n                }\n                return true;\n            }\n            return true;\n        }\n        if (grad1 === grad2) {\n            if (int1 !== int2) {\n                return false;\n            }\n            if ((this.px1 >= Math.min(otherSegment.px1, otherSegment.px2)) && (this.px1 <= Math.max(otherSegment.py1, otherSegment.py2))) {\n                this.xi = this.px1;\n                this.yi = this.py1;\n                return true;\n            }\n            if ((this.px2 >= Math.min(otherSegment.px1, otherSegment.px2)) && (this.px2 <= Math.max(otherSegment.px1, otherSegment.px2))) {\n                this.xi = this.px2;\n                this.yi = this.py2;\n                return true;\n            }\n            return false;\n        }\n        this.xi = ((int2 - int1) / (grad1 - grad2));\n        this.yi = (grad1 * this.xi + int1);\n        if (((this.px1 - this.xi) * (this.xi - this.px2) < -0.00001) || ((otherSegment.px1 - this.xi) * (this.xi - otherSegment.px2) < -0.00001)) {\n            return false;\n        }\n        return true;\n    }\n}\n","import { Segment } from '../geometry';\nexport class HachureIterator {\n    constructor(top, bottom, left, right, gap, sinAngle, cosAngle, tanAngle) {\n        this.deltaX = 0;\n        this.hGap = 0;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n        this.gap = gap;\n        this.sinAngle = sinAngle;\n        this.tanAngle = tanAngle;\n        if (Math.abs(sinAngle) < 0.0001) {\n            this.pos = left + gap;\n        }\n        else if (Math.abs(sinAngle) > 0.9999) {\n            this.pos = top + gap;\n        }\n        else {\n            this.deltaX = (bottom - top) * Math.abs(tanAngle);\n            this.pos = left - Math.abs(this.deltaX);\n            this.hGap = Math.abs(gap / cosAngle);\n            this.sLeft = new Segment([left, bottom], [left, top]);\n            this.sRight = new Segment([right, bottom], [right, top]);\n        }\n    }\n    nextLine() {\n        if (Math.abs(this.sinAngle) < 0.0001) {\n            if (this.pos < this.right) {\n                const line = [this.pos, this.top, this.pos, this.bottom];\n                this.pos += this.gap;\n                return line;\n            }\n        }\n        else if (Math.abs(this.sinAngle) > 0.9999) {\n            if (this.pos < this.bottom) {\n                const line = [this.left, this.pos, this.right, this.pos];\n                this.pos += this.gap;\n                return line;\n            }\n        }\n        else {\n            let xLower = this.pos - this.deltaX / 2;\n            let xUpper = this.pos + this.deltaX / 2;\n            let yLower = this.bottom;\n            let yUpper = this.top;\n            if (this.pos < (this.right + this.deltaX)) {\n                while (((xLower < this.left) && (xUpper < this.left)) || ((xLower > this.right) && (xUpper > this.right))) {\n                    this.pos += this.hGap;\n                    xLower = this.pos - this.deltaX / 2;\n                    xUpper = this.pos + this.deltaX / 2;\n                    if (this.pos > (this.right + this.deltaX)) {\n                        return null;\n                    }\n                }\n                const s = new Segment([xLower, yLower], [xUpper, yUpper]);\n                if (this.sLeft && s.intersects(this.sLeft)) {\n                    xLower = s.xi;\n                    yLower = s.yi;\n                }\n                if (this.sRight && s.intersects(this.sRight)) {\n                    xUpper = s.xi;\n                    yUpper = s.yi;\n                }\n                if (this.tanAngle > 0) {\n                    xLower = this.right - (xLower - this.left);\n                    xUpper = this.right - (xUpper - this.left);\n                }\n                const line = [xLower, yLower, xUpper, yUpper];\n                this.pos += this.hGap;\n                return line;\n            }\n        }\n        return null;\n    }\n}\n","import { Segment } from '../geometry';\nimport { HachureIterator } from '../utils/hachure';\nexport function lineLength(line) {\n    const p1 = line[0];\n    const p2 = line[1];\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\nexport function getIntersectingLines(line, points) {\n    const intersections = [];\n    const s1 = new Segment([line[0], line[1]], [line[2], line[3]]);\n    for (let i = 0; i < points.length; i++) {\n        const s2 = new Segment(points[i], points[(i + 1) % points.length]);\n        if (s1.intersects(s2)) {\n            intersections.push([s1.xi, s1.yi]);\n        }\n    }\n    return intersections;\n}\nexport function affine(x, y, cx, cy, sinAnglePrime, cosAnglePrime, R) {\n    const A = -cx * cosAnglePrime - cy * sinAnglePrime + cx;\n    const B = R * (cx * sinAnglePrime - cy * cosAnglePrime) + cy;\n    const C = cosAnglePrime;\n    const D = sinAnglePrime;\n    const E = -R * sinAnglePrime;\n    const F = R * cosAnglePrime;\n    return [\n        A + C * x + D * y,\n        B + E * x + F * y\n    ];\n}\nexport function hachureLinesForPolygon(points, o) {\n    const ret = [];\n    if (points && points.length) {\n        let left = points[0][0];\n        let right = points[0][0];\n        let top = points[0][1];\n        let bottom = points[0][1];\n        for (let i = 1; i < points.length; i++) {\n            left = Math.min(left, points[i][0]);\n            right = Math.max(right, points[i][0]);\n            top = Math.min(top, points[i][1]);\n            bottom = Math.max(bottom, points[i][1]);\n        }\n        const angle = o.hachureAngle;\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        const radPerDeg = Math.PI / 180;\n        const hachureAngle = (angle % 180) * radPerDeg;\n        const cosAngle = Math.cos(hachureAngle);\n        const sinAngle = Math.sin(hachureAngle);\n        const tanAngle = Math.tan(hachureAngle);\n        const it = new HachureIterator(top - 1, bottom + 1, left - 1, right + 1, gap, sinAngle, cosAngle, tanAngle);\n        let rect;\n        while ((rect = it.nextLine()) != null) {\n            const lines = getIntersectingLines(rect, points);\n            for (let i = 0; i < lines.length; i++) {\n                if (i < (lines.length - 1)) {\n                    const p1 = lines[i];\n                    const p2 = lines[i + 1];\n                    ret.push([p1, p2]);\n                }\n            }\n        }\n    }\n    return ret;\n}\nexport function hachureLinesForEllipse(cx, cy, width, height, o, renderer) {\n    const ret = [];\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += renderer.getOffset(-rx * 0.05, rx * 0.05, o);\n    ry += renderer.getOffset(-ry * 0.05, ry * 0.05, o);\n    const angle = o.hachureAngle;\n    let gap = o.hachureGap;\n    if (gap <= 0) {\n        gap = o.strokeWidth * 4;\n    }\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n        fweight = o.strokeWidth / 2;\n    }\n    const radPerDeg = Math.PI / 180;\n    const hachureAngle = (angle % 180) * radPerDeg;\n    const tanAngle = Math.tan(hachureAngle);\n    const aspectRatio = ry / rx;\n    const hyp = Math.sqrt(aspectRatio * tanAngle * aspectRatio * tanAngle + 1);\n    const sinAnglePrime = aspectRatio * tanAngle / hyp;\n    const cosAnglePrime = 1 / hyp;\n    const gapPrime = gap / ((rx * ry / Math.sqrt((ry * cosAnglePrime) * (ry * cosAnglePrime) + (rx * sinAnglePrime) * (rx * sinAnglePrime))) / rx);\n    let halfLen = Math.sqrt((rx * rx) - (cx - rx + gapPrime) * (cx - rx + gapPrime));\n    for (let xPos = cx - rx + gapPrime; xPos < cx + rx; xPos += gapPrime) {\n        halfLen = Math.sqrt((rx * rx) - (cx - xPos) * (cx - xPos));\n        const p1 = affine(xPos, cy - halfLen, cx, cy, sinAnglePrime, cosAnglePrime, aspectRatio);\n        const p2 = affine(xPos, cy + halfLen, cx, cy, sinAnglePrime, cosAnglePrime, aspectRatio);\n        ret.push([p1, p2]);\n    }\n    return ret;\n}\n","import { hachureLinesForPolygon, hachureLinesForEllipse } from './filler-utils';\nexport class HachureFiller {\n    constructor(renderer) {\n        this.renderer = renderer;\n    }\n    fillPolygon(points, o) {\n        return this._fillPolygon(points, o);\n    }\n    fillEllipse(cx, cy, width, height, o) {\n        return this._fillEllipse(cx, cy, width, height, o);\n    }\n    _fillPolygon(points, o, connectEnds = false) {\n        const lines = hachureLinesForPolygon(points, o);\n        const ops = this.renderLines(lines, o, connectEnds);\n        return { type: 'fillSketch', ops };\n    }\n    _fillEllipse(cx, cy, width, height, o, connectEnds = false) {\n        const lines = hachureLinesForEllipse(cx, cy, width, height, o, this.renderer);\n        const ops = this.renderLines(lines, o, connectEnds);\n        return { type: 'fillSketch', ops };\n    }\n    renderLines(lines, o, connectEnds) {\n        let ops = [];\n        let prevPoint = null;\n        for (const line of lines) {\n            ops = ops.concat(this.renderer.doubleLine(line[0][0], line[0][1], line[1][0], line[1][1], o));\n            if (connectEnds && prevPoint) {\n                ops = ops.concat(this.renderer.doubleLine(prevPoint[0], prevPoint[1], line[0][0], line[0][1], o));\n            }\n            prevPoint = line[1];\n        }\n        return ops;\n    }\n}\n","import { HachureFiller } from './hachure-filler';\nexport class ZigZagFiller extends HachureFiller {\n    fillPolygon(points, o) {\n        return this._fillPolygon(points, o, true);\n    }\n    fillEllipse(cx, cy, width, height, o) {\n        return this._fillEllipse(cx, cy, width, height, o, true);\n    }\n}\n","import { HachureFiller } from './hachure-filler';\nexport class HatchFiller extends HachureFiller {\n    fillPolygon(points, o) {\n        const set = this._fillPolygon(points, o);\n        const o2 = Object.assign({}, o, { hachureAngle: o.hachureAngle + 90 });\n        const set2 = this._fillPolygon(points, o2);\n        set.ops = set.ops.concat(set2.ops);\n        return set;\n    }\n    fillEllipse(cx, cy, width, height, o) {\n        const set = this._fillEllipse(cx, cy, width, height, o);\n        const o2 = Object.assign({}, o, { hachureAngle: o.hachureAngle + 90 });\n        const set2 = this._fillEllipse(cx, cy, width, height, o2);\n        set.ops = set.ops.concat(set2.ops);\n        return set;\n    }\n}\n","import { hachureLinesForPolygon, hachureLinesForEllipse, lineLength } from './filler-utils';\nexport class DotFiller {\n    constructor(renderer) {\n        this.renderer = renderer;\n    }\n    fillPolygon(points, o) {\n        o = Object.assign({}, o, { curveStepCount: 4, hachureAngle: 0 });\n        const lines = hachureLinesForPolygon(points, o);\n        return this.dotsOnLines(lines, o);\n    }\n    fillEllipse(cx, cy, width, height, o) {\n        o = Object.assign({}, o, { curveStepCount: 4, hachureAngle: 0 });\n        const lines = hachureLinesForEllipse(cx, cy, width, height, o, this.renderer);\n        return this.dotsOnLines(lines, o);\n    }\n    dotsOnLines(lines, o) {\n        let ops = [];\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        for (const line of lines) {\n            const length = lineLength(line);\n            const dl = length / gap;\n            const count = Math.ceil(dl) - 1;\n            const alpha = Math.atan((line[1][1] - line[0][1]) / (line[1][0] - line[0][0]));\n            for (let i = 0; i < count; i++) {\n                const l = gap * (i + 1);\n                const dy = l * Math.sin(alpha);\n                const dx = l * Math.cos(alpha);\n                const c = [line[0][0] - dx, line[0][1] + dy];\n                const cx = this.renderer.getOffset(c[0] - gap / 4, c[0] + gap / 4, o);\n                const cy = this.renderer.getOffset(c[1] - gap / 4, c[1] + gap / 4, o);\n                const ellipse = this.renderer.ellipse(cx, cy, fweight, fweight, o);\n                ops = ops.concat(ellipse.ops);\n            }\n        }\n        return { type: 'fillSketch', ops };\n    }\n}\n","import { HachureFiller } from './hachure-filler';\nimport { ZigZagFiller } from './zigzag-filler';\nimport { HatchFiller } from './hatch-filler';\nimport { DotFiller } from './dot-filler';\nconst fillers = {};\nexport function getFiller(renderer, o) {\n    let fillerName = o.fillStyle || 'hachure';\n    if (!fillers[fillerName]) {\n        switch (fillerName) {\n            case 'zigzag':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new ZigZagFiller(renderer);\n                }\n                break;\n            case 'cross-hatch':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new HatchFiller(renderer);\n                }\n                break;\n            case 'dots':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new DotFiller(renderer);\n                }\n                break;\n            case 'hachure':\n            default:\n                fillerName = 'hachure';\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new HachureFiller(renderer);\n                }\n                break;\n        }\n    }\n    return fillers[fillerName];\n}\n","import { RoughPath, RoughArcConverter, PathFitter } from './path.js';\nimport { getFiller } from './fillers/filler';\nexport class RoughRenderer {\n    line(x1, y1, x2, y2, o) {\n        const ops = this.doubleLine(x1, y1, x2, y2, o);\n        return { type: 'path', ops };\n    }\n    linearPath(points, close, o) {\n        const len = (points || []).length;\n        if (len > 2) {\n            let ops = [];\n            for (let i = 0; i < (len - 1); i++) {\n                ops = ops.concat(this.doubleLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], o));\n            }\n            if (close) {\n                ops = ops.concat(this.doubleLine(points[len - 1][0], points[len - 1][1], points[0][0], points[0][1], o));\n            }\n            return { type: 'path', ops };\n        }\n        else if (len === 2) {\n            return this.line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n        }\n        return { type: 'path', ops: [] };\n    }\n    polygon(points, o) {\n        return this.linearPath(points, true, o);\n    }\n    rectangle(x, y, width, height, o) {\n        const points = [\n            [x, y], [x + width, y], [x + width, y + height], [x, y + height]\n        ];\n        return this.polygon(points, o);\n    }\n    curve(points, o) {\n        const o1 = this._curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n        const o2 = this._curveWithOffset(points, 1.5 * (1 + o.roughness * 0.22), o);\n        return { type: 'path', ops: o1.concat(o2) };\n    }\n    ellipse(x, y, width, height, o) {\n        const increment = (Math.PI * 2) / o.curveStepCount;\n        let rx = Math.abs(width / 2);\n        let ry = Math.abs(height / 2);\n        rx += this.getOffset(-rx * 0.05, rx * 0.05, o);\n        ry += this.getOffset(-ry * 0.05, ry * 0.05, o);\n        const o1 = this._ellipse(increment, x, y, rx, ry, 1, increment * this.getOffset(0.1, this.getOffset(0.4, 1, o), o), o);\n        const o2 = this._ellipse(increment, x, y, rx, ry, 1.5, 0, o);\n        return { type: 'path', ops: o1.concat(o2) };\n    }\n    arc(x, y, width, height, start, stop, closed, roughClosure, o) {\n        const cx = x;\n        const cy = y;\n        let rx = Math.abs(width / 2);\n        let ry = Math.abs(height / 2);\n        rx += this.getOffset(-rx * 0.01, rx * 0.01, o);\n        ry += this.getOffset(-ry * 0.01, ry * 0.01, o);\n        let strt = start;\n        let stp = stop;\n        while (strt < 0) {\n            strt += Math.PI * 2;\n            stp += Math.PI * 2;\n        }\n        if ((stp - strt) > (Math.PI * 2)) {\n            strt = 0;\n            stp = Math.PI * 2;\n        }\n        const ellipseInc = (Math.PI * 2) / o.curveStepCount;\n        const arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n        const o1 = this._arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n        const o2 = this._arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n        let ops = o1.concat(o2);\n        if (closed) {\n            if (roughClosure) {\n                ops = ops.concat(this.doubleLine(cx, cy, cx + rx * Math.cos(strt), cy + ry * Math.sin(strt), o));\n                ops = ops.concat(this.doubleLine(cx, cy, cx + rx * Math.cos(stp), cy + ry * Math.sin(stp), o));\n            }\n            else {\n                ops.push({ op: 'lineTo', data: [cx, cy] });\n                ops.push({ op: 'lineTo', data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)] });\n            }\n        }\n        return { type: 'path', ops };\n    }\n    svgPath(path, o) {\n        path = (path || '').replace(/\\n/g, ' ').replace(/(-\\s)/g, '-').replace('/(\\s\\s)/g', ' ');\n        let p = new RoughPath(path);\n        if (o.simplification) {\n            const fitter = new PathFitter(p.linearPoints, p.closed);\n            const d = fitter.fit(o.simplification);\n            p = new RoughPath(d);\n        }\n        let ops = [];\n        const segments = p.segments || [];\n        for (let i = 0; i < segments.length; i++) {\n            const s = segments[i];\n            const prev = i > 0 ? segments[i - 1] : null;\n            const opList = this._processSegment(p, s, prev, o);\n            if (opList && opList.length) {\n                ops = ops.concat(opList);\n            }\n        }\n        return { type: 'path', ops };\n    }\n    solidFillPolygon(points, o) {\n        const ops = [];\n        if (points.length) {\n            const offset = o.maxRandomnessOffset || 0;\n            const len = points.length;\n            if (len > 2) {\n                ops.push({ op: 'move', data: [points[0][0] + this.getOffset(-offset, offset, o), points[0][1] + this.getOffset(-offset, offset, o)] });\n                for (let i = 1; i < len; i++) {\n                    ops.push({ op: 'lineTo', data: [points[i][0] + this.getOffset(-offset, offset, o), points[i][1] + this.getOffset(-offset, offset, o)] });\n                }\n            }\n        }\n        return { type: 'fillPath', ops };\n    }\n    patternFillPolygon(points, o) {\n        const filler = getFiller(this, o);\n        return filler.fillPolygon(points, o);\n    }\n    patternFillEllipse(cx, cy, width, height, o) {\n        const filler = getFiller(this, o);\n        return filler.fillEllipse(cx, cy, width, height, o);\n    }\n    patternFillArc(x, y, width, height, start, stop, o) {\n        const cx = x;\n        const cy = y;\n        let rx = Math.abs(width / 2);\n        let ry = Math.abs(height / 2);\n        rx += this.getOffset(-rx * 0.01, rx * 0.01, o);\n        ry += this.getOffset(-ry * 0.01, ry * 0.01, o);\n        let strt = start;\n        let stp = stop;\n        while (strt < 0) {\n            strt += Math.PI * 2;\n            stp += Math.PI * 2;\n        }\n        if ((stp - strt) > (Math.PI * 2)) {\n            strt = 0;\n            stp = Math.PI * 2;\n        }\n        const increment = (stp - strt) / o.curveStepCount;\n        const points = [];\n        for (let angle = strt; angle <= stp; angle = angle + increment) {\n            points.push([cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)]);\n        }\n        points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n        points.push([cx, cy]);\n        return this.patternFillPolygon(points, o);\n    }\n    /// \n    getOffset(min, max, ops) {\n        return ops.roughness * ((Math.random() * (max - min)) + min);\n    }\n    doubleLine(x1, y1, x2, y2, o) {\n        const o1 = this._line(x1, y1, x2, y2, o, true, false);\n        const o2 = this._line(x1, y1, x2, y2, o, true, true);\n        return o1.concat(o2);\n    }\n    _line(x1, y1, x2, y2, o, move, overlay) {\n        const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n        let offset = o.maxRandomnessOffset || 0;\n        if ((offset * offset * 100) > lengthSq) {\n            offset = Math.sqrt(lengthSq) / 10;\n        }\n        const halfOffset = offset / 2;\n        const divergePoint = 0.2 + Math.random() * 0.2;\n        let midDispX = o.bowing * o.maxRandomnessOffset * (y2 - y1) / 200;\n        let midDispY = o.bowing * o.maxRandomnessOffset * (x1 - x2) / 200;\n        midDispX = this.getOffset(-midDispX, midDispX, o);\n        midDispY = this.getOffset(-midDispY, midDispY, o);\n        const ops = [];\n        if (move) {\n            if (overlay) {\n                ops.push({\n                    op: 'move', data: [\n                        x1 + this.getOffset(-halfOffset, halfOffset, o),\n                        y1 + this.getOffset(-halfOffset, halfOffset, o)\n                    ]\n                });\n            }\n            else {\n                ops.push({\n                    op: 'move', data: [\n                        x1 + this.getOffset(-offset, offset, o),\n                        y1 + this.getOffset(-offset, offset, o)\n                    ]\n                });\n            }\n        }\n        if (overlay) {\n            ops.push({\n                op: 'bcurveTo', data: [\n                    midDispX + x1 + (x2 - x1) * divergePoint + this.getOffset(-halfOffset, halfOffset, o),\n                    midDispY + y1 + (y2 - y1) * divergePoint + this.getOffset(-halfOffset, halfOffset, o),\n                    midDispX + x1 + 2 * (x2 - x1) * divergePoint + this.getOffset(-halfOffset, halfOffset, o),\n                    midDispY + y1 + 2 * (y2 - y1) * divergePoint + this.getOffset(-halfOffset, halfOffset, o),\n                    x2 + this.getOffset(-halfOffset, halfOffset, o),\n                    y2 + this.getOffset(-halfOffset, halfOffset, o)\n                ]\n            });\n        }\n        else {\n            ops.push({\n                op: 'bcurveTo', data: [\n                    midDispX + x1 + (x2 - x1) * divergePoint + this.getOffset(-offset, offset, o),\n                    midDispY + y1 + (y2 - y1) * divergePoint + this.getOffset(-offset, offset, o),\n                    midDispX + x1 + 2 * (x2 - x1) * divergePoint + this.getOffset(-offset, offset, o),\n                    midDispY + y1 + 2 * (y2 - y1) * divergePoint + this.getOffset(-offset, offset, o),\n                    x2 + this.getOffset(-offset, offset, o),\n                    y2 + this.getOffset(-offset, offset, o)\n                ]\n            });\n        }\n        return ops;\n    }\n    _curve(points, closePoint, o) {\n        const len = points.length;\n        let ops = [];\n        if (len > 3) {\n            const b = [];\n            const s = 1 - o.curveTightness;\n            ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n            for (let i = 1; (i + 2) < len; i++) {\n                const cachedVertArray = points[i];\n                b[0] = [cachedVertArray[0], cachedVertArray[1]];\n                b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n                b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n                b[3] = [points[i + 1][0], points[i + 1][1]];\n                ops.push({ op: 'bcurveTo', data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]] });\n            }\n            if (closePoint && closePoint.length === 2) {\n                const ro = o.maxRandomnessOffset;\n                ops.push({ op: 'lineTo', data: [closePoint[0] + this.getOffset(-ro, ro, o), closePoint[1] + +this.getOffset(-ro, ro, o)] });\n            }\n        }\n        else if (len === 3) {\n            ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n            ops.push({\n                op: 'bcurveTo', data: [\n                    points[1][0], points[1][1],\n                    points[2][0], points[2][1],\n                    points[2][0], points[2][1]\n                ]\n            });\n        }\n        else if (len === 2) {\n            ops = ops.concat(this.doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o));\n        }\n        return ops;\n    }\n    _ellipse(increment, cx, cy, rx, ry, offset, overlap, o) {\n        const radOffset = this.getOffset(-0.5, 0.5, o) - (Math.PI / 2);\n        const points = [];\n        points.push([\n            this.getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n            this.getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n        ]);\n        for (let angle = radOffset; angle < (Math.PI * 2 + radOffset - 0.01); angle = angle + increment) {\n            points.push([\n                this.getOffset(-offset, offset, o) + cx + rx * Math.cos(angle),\n                this.getOffset(-offset, offset, o) + cy + ry * Math.sin(angle)\n            ]);\n        }\n        points.push([\n            this.getOffset(-offset, offset, o) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n            this.getOffset(-offset, offset, o) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)\n        ]);\n        points.push([\n            this.getOffset(-offset, offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n            this.getOffset(-offset, offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap)\n        ]);\n        points.push([\n            this.getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n            this.getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)\n        ]);\n        return this._curve(points, null, o);\n    }\n    _curveWithOffset(points, offset, o) {\n        const ps = [];\n        ps.push([\n            points[0][0] + this.getOffset(-offset, offset, o),\n            points[0][1] + this.getOffset(-offset, offset, o),\n        ]);\n        ps.push([\n            points[0][0] + this.getOffset(-offset, offset, o),\n            points[0][1] + this.getOffset(-offset, offset, o),\n        ]);\n        for (let i = 1; i < points.length; i++) {\n            ps.push([\n                points[i][0] + this.getOffset(-offset, offset, o),\n                points[i][1] + this.getOffset(-offset, offset, o),\n            ]);\n            if (i === (points.length - 1)) {\n                ps.push([\n                    points[i][0] + this.getOffset(-offset, offset, o),\n                    points[i][1] + this.getOffset(-offset, offset, o),\n                ]);\n            }\n        }\n        return this._curve(ps, null, o);\n    }\n    _arc(increment, cx, cy, rx, ry, strt, stp, offset, o) {\n        const radOffset = strt + this.getOffset(-0.1, 0.1, o);\n        const points = [];\n        points.push([\n            this.getOffset(-offset, offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n            this.getOffset(-offset, offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n        ]);\n        for (let angle = radOffset; angle <= stp; angle = angle + increment) {\n            points.push([\n                this.getOffset(-offset, offset, o) + cx + rx * Math.cos(angle),\n                this.getOffset(-offset, offset, o) + cy + ry * Math.sin(angle)\n            ]);\n        }\n        points.push([\n            cx + rx * Math.cos(stp),\n            cy + ry * Math.sin(stp)\n        ]);\n        points.push([\n            cx + rx * Math.cos(stp),\n            cy + ry * Math.sin(stp)\n        ]);\n        return this._curve(points, null, o);\n    }\n    _bezierTo(x1, y1, x2, y2, x, y, path, o) {\n        const ops = [];\n        const ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.5];\n        let f = [0, 0];\n        for (let i = 0; i < 2; i++) {\n            if (i === 0) {\n                ops.push({ op: 'move', data: [path.x, path.y] });\n            }\n            else {\n                ops.push({ op: 'move', data: [path.x + this.getOffset(-ros[0], ros[0], o), path.y + this.getOffset(-ros[0], ros[0], o)] });\n            }\n            f = [x + this.getOffset(-ros[i], ros[i], o), y + this.getOffset(-ros[i], ros[i], o)];\n            ops.push({\n                op: 'bcurveTo', data: [\n                    x1 + this.getOffset(-ros[i], ros[i], o), y1 + this.getOffset(-ros[i], ros[i], o),\n                    x2 + this.getOffset(-ros[i], ros[i], o), y2 + this.getOffset(-ros[i], ros[i], o),\n                    f[0], f[1]\n                ]\n            });\n        }\n        path.setPosition(f[0], f[1]);\n        return ops;\n    }\n    _processSegment(path, seg, prevSeg, o) {\n        let ops = [];\n        switch (seg.key) {\n            case 'M':\n            case 'm': {\n                const delta = seg.key === 'm';\n                if (seg.data.length >= 2) {\n                    let x = +seg.data[0];\n                    let y = +seg.data[1];\n                    if (delta) {\n                        x += path.x;\n                        y += path.y;\n                    }\n                    const ro = 1 * (o.maxRandomnessOffset || 0);\n                    x = x + this.getOffset(-ro, ro, o);\n                    y = y + this.getOffset(-ro, ro, o);\n                    path.setPosition(x, y);\n                    ops.push({ op: 'move', data: [x, y] });\n                }\n                break;\n            }\n            case 'L':\n            case 'l': {\n                const delta = seg.key === 'l';\n                if (seg.data.length >= 2) {\n                    let x = +seg.data[0];\n                    let y = +seg.data[1];\n                    if (delta) {\n                        x += path.x;\n                        y += path.y;\n                    }\n                    ops = ops.concat(this.doubleLine(path.x, path.y, x, y, o));\n                    path.setPosition(x, y);\n                }\n                break;\n            }\n            case 'H':\n            case 'h': {\n                const delta = seg.key === 'h';\n                if (seg.data.length) {\n                    let x = +seg.data[0];\n                    if (delta) {\n                        x += path.x;\n                    }\n                    ops = ops.concat(this.doubleLine(path.x, path.y, x, path.y, o));\n                    path.setPosition(x, path.y);\n                }\n                break;\n            }\n            case 'V':\n            case 'v': {\n                const delta = seg.key === 'v';\n                if (seg.data.length) {\n                    let y = +seg.data[0];\n                    if (delta) {\n                        y += path.y;\n                    }\n                    ops = ops.concat(this.doubleLine(path.x, path.y, path.x, y, o));\n                    path.setPosition(path.x, y);\n                }\n                break;\n            }\n            case 'Z':\n            case 'z': {\n                if (path.first) {\n                    ops = ops.concat(this.doubleLine(path.x, path.y, path.first[0], path.first[1], o));\n                    path.setPosition(path.first[0], path.first[1]);\n                    path.first = null;\n                }\n                break;\n            }\n            case 'C':\n            case 'c': {\n                const delta = seg.key === 'c';\n                if (seg.data.length >= 6) {\n                    let x1 = +seg.data[0];\n                    let y1 = +seg.data[1];\n                    let x2 = +seg.data[2];\n                    let y2 = +seg.data[3];\n                    let x = +seg.data[4];\n                    let y = +seg.data[5];\n                    if (delta) {\n                        x1 += path.x;\n                        x2 += path.x;\n                        x += path.x;\n                        y1 += path.y;\n                        y2 += path.y;\n                        y += path.y;\n                    }\n                    const ob = this._bezierTo(x1, y1, x2, y2, x, y, path, o);\n                    ops = ops.concat(ob);\n                    path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n                }\n                break;\n            }\n            case 'S':\n            case 's': {\n                const delta = seg.key === 's';\n                if (seg.data.length >= 4) {\n                    let x2 = +seg.data[0];\n                    let y2 = +seg.data[1];\n                    let x = +seg.data[2];\n                    let y = +seg.data[3];\n                    if (delta) {\n                        x2 += path.x;\n                        x += path.x;\n                        y2 += path.y;\n                        y += path.y;\n                    }\n                    let x1 = x2;\n                    let y1 = y2;\n                    const prevKey = prevSeg ? prevSeg.key : '';\n                    let ref = null;\n                    if (prevKey === 'c' || prevKey === 'C' || prevKey === 's' || prevKey === 'S') {\n                        ref = path.bezierReflectionPoint;\n                    }\n                    if (ref) {\n                        x1 = ref[0];\n                        y1 = ref[1];\n                    }\n                    const ob = this._bezierTo(x1, y1, x2, y2, x, y, path, o);\n                    ops = ops.concat(ob);\n                    path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n                }\n                break;\n            }\n            case 'Q':\n            case 'q': {\n                const delta = seg.key === 'q';\n                if (seg.data.length >= 4) {\n                    let x1 = +seg.data[0];\n                    let y1 = +seg.data[1];\n                    let x = +seg.data[2];\n                    let y = +seg.data[3];\n                    if (delta) {\n                        x1 += path.x;\n                        x += path.x;\n                        y1 += path.y;\n                        y += path.y;\n                    }\n                    const offset1 = 1 * (1 + o.roughness * 0.2);\n                    const offset2 = 1.5 * (1 + o.roughness * 0.22);\n                    ops.push({ op: 'move', data: [path.x + this.getOffset(-offset1, offset1, o), path.y + this.getOffset(-offset1, offset1, o)] });\n                    let f = [x + this.getOffset(-offset1, offset1, o), y + this.getOffset(-offset1, offset1, o)];\n                    ops.push({\n                        op: 'qcurveTo', data: [\n                            x1 + this.getOffset(-offset1, offset1, o), y1 + this.getOffset(-offset1, offset1, o),\n                            f[0], f[1]\n                        ]\n                    });\n                    ops.push({ op: 'move', data: [path.x + this.getOffset(-offset2, offset2, o), path.y + this.getOffset(-offset2, offset2, o)] });\n                    f = [x + this.getOffset(-offset2, offset2, o), y + this.getOffset(-offset2, offset2, o)];\n                    ops.push({\n                        op: 'qcurveTo', data: [\n                            x1 + this.getOffset(-offset2, offset2, o), y1 + this.getOffset(-offset2, offset2, o),\n                            f[0], f[1]\n                        ]\n                    });\n                    path.setPosition(f[0], f[1]);\n                    path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n                }\n                break;\n            }\n            case 'T':\n            case 't': {\n                const delta = seg.key === 't';\n                if (seg.data.length >= 2) {\n                    let x = +seg.data[0];\n                    let y = +seg.data[1];\n                    if (delta) {\n                        x += path.x;\n                        y += path.y;\n                    }\n                    let x1 = x;\n                    let y1 = y;\n                    const prevKey = prevSeg ? prevSeg.key : '';\n                    let ref = null;\n                    if (prevKey === 'q' || prevKey === 'Q' || prevKey === 't' || prevKey === 'T') {\n                        ref = path.quadReflectionPoint;\n                    }\n                    if (ref) {\n                        x1 = ref[0];\n                        y1 = ref[1];\n                    }\n                    const offset1 = 1 * (1 + o.roughness * 0.2);\n                    const offset2 = 1.5 * (1 + o.roughness * 0.22);\n                    ops.push({ op: 'move', data: [path.x + this.getOffset(-offset1, offset1, o), path.y + this.getOffset(-offset1, offset1, o)] });\n                    let f = [x + this.getOffset(-offset1, offset1, o), y + this.getOffset(-offset1, offset1, o)];\n                    ops.push({\n                        op: 'qcurveTo', data: [\n                            x1 + this.getOffset(-offset1, offset1, o), y1 + this.getOffset(-offset1, offset1, o),\n                            f[0], f[1]\n                        ]\n                    });\n                    ops.push({ op: 'move', data: [path.x + this.getOffset(-offset2, offset2, o), path.y + this.getOffset(-offset2, offset2, o)] });\n                    f = [x + this.getOffset(-offset2, offset2, o), y + this.getOffset(-offset2, offset2, o)];\n                    ops.push({\n                        op: 'qcurveTo', data: [\n                            x1 + this.getOffset(-offset2, offset2, o), y1 + this.getOffset(-offset2, offset2, o),\n                            f[0], f[1]\n                        ]\n                    });\n                    path.setPosition(f[0], f[1]);\n                    path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n                }\n                break;\n            }\n            case 'A':\n            case 'a': {\n                const delta = seg.key === 'a';\n                if (seg.data.length >= 7) {\n                    const rx = +seg.data[0];\n                    const ry = +seg.data[1];\n                    const angle = +seg.data[2];\n                    const largeArcFlag = +seg.data[3];\n                    const sweepFlag = +seg.data[4];\n                    let x = +seg.data[5];\n                    let y = +seg.data[6];\n                    if (delta) {\n                        x += path.x;\n                        y += path.y;\n                    }\n                    if (x === path.x && y === path.y) {\n                        break;\n                    }\n                    if (rx === 0 || ry === 0) {\n                        ops = ops.concat(this.doubleLine(path.x, path.y, x, y, o));\n                        path.setPosition(x, y);\n                    }\n                    else {\n                        for (let i = 0; i < 1; i++) {\n                            const arcConverter = new RoughArcConverter([path.x, path.y], [x, y], [rx, ry], angle, largeArcFlag ? true : false, sweepFlag ? true : false);\n                            let segment = arcConverter.getNextSegment();\n                            while (segment) {\n                                const ob = this._bezierTo(segment.cp1[0], segment.cp1[1], segment.cp2[0], segment.cp2[1], segment.to[0], segment.to[1], path, o);\n                                ops = ops.concat(ob);\n                                segment = arcConverter.getNextSegment();\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            default:\n                break;\n        }\n        return ops;\n    }\n}\n","import { RoughRenderer } from './renderer';\nconst hasSelf = typeof self !== 'undefined';\nconst roughScript = hasSelf && self && self.document && self.document.currentScript && self.document.currentScript.src;\nexport function createRenderer(config) {\n    if (hasSelf && roughScript && self && self.workly && config.async && (!config.noWorker)) {\n        const worklySource = config.worklyURL || 'https://cdn.jsdelivr.net/gh/pshihn/workly/dist/workly.min.js';\n        if (worklySource) {\n            const code = `importScripts('${worklySource}', '${roughScript}');\\nworkly.expose(self.rough.createRenderer());`;\n            const ourl = URL.createObjectURL(new Blob([code]));\n            return self.workly.proxy(ourl);\n        }\n    }\n    return new RoughRenderer();\n}\n","import { createRenderer } from './renderer-factory.js';\nconst hasSelf = typeof self !== 'undefined';\nexport class RoughGeneratorBase {\n    constructor(config, surface) {\n        this.defaultOptions = {\n            maxRandomnessOffset: 2,\n            roughness: 1,\n            bowing: 1,\n            stroke: '#000',\n            strokeWidth: 1,\n            curveTightness: 0,\n            curveStepCount: 9,\n            fillStyle: 'hachure',\n            fillWeight: -1,\n            hachureAngle: -41,\n            hachureGap: -1\n        };\n        this.config = config || {};\n        this.surface = surface;\n        this.renderer = createRenderer(this.config);\n        if (this.config.options) {\n            this.defaultOptions = this._options(this.config.options);\n        }\n    }\n    _options(options) {\n        return options ? Object.assign({}, this.defaultOptions, options) : this.defaultOptions;\n    }\n    _drawable(shape, sets, options) {\n        return { shape, sets: sets || [], options: options || this.defaultOptions };\n    }\n    get lib() {\n        return this.renderer;\n    }\n    getCanvasSize() {\n        const val = (w) => {\n            if (w && typeof w === 'object') {\n                if (w.baseVal && w.baseVal.value) {\n                    return w.baseVal.value;\n                }\n            }\n            return w || 100;\n        };\n        if (this.surface) {\n            return [val(this.surface.width), val(this.surface.height)];\n        }\n        return [100, 100];\n    }\n    computePolygonSize(points) {\n        if (points.length) {\n            let left = points[0][0];\n            let right = points[0][0];\n            let top = points[0][1];\n            let bottom = points[0][1];\n            for (let i = 1; i < points.length; i++) {\n                left = Math.min(left, points[i][0]);\n                right = Math.max(right, points[i][0]);\n                top = Math.min(top, points[i][1]);\n                bottom = Math.max(bottom, points[i][1]);\n            }\n            return [(right - left), (bottom - top)];\n        }\n        return [0, 0];\n    }\n    polygonPath(points) {\n        let d = '';\n        if (points.length) {\n            d = `M${points[0][0]},${points[0][1]}`;\n            for (let i = 1; i < points.length; i++) {\n                d = `${d} L${points[i][0]},${points[i][1]}`;\n            }\n        }\n        return d;\n    }\n    computePathSize(d) {\n        let size = [0, 0];\n        if (hasSelf && self.document) {\n            try {\n                const ns = 'http://www.w3.org/2000/svg';\n                const svg = self.document.createElementNS(ns, 'svg');\n                svg.setAttribute('width', '0');\n                svg.setAttribute('height', '0');\n                const pathNode = self.document.createElementNS(ns, 'path');\n                pathNode.setAttribute('d', d);\n                svg.appendChild(pathNode);\n                self.document.body.appendChild(svg);\n                const bb = pathNode.getBBox();\n                if (bb) {\n                    size[0] = bb.width || 0;\n                    size[1] = bb.height || 0;\n                }\n                self.document.body.removeChild(svg);\n            }\n            catch (err) { }\n        }\n        const canvasSize = this.getCanvasSize();\n        if (!(size[0] * size[1])) {\n            size = canvasSize;\n        }\n        return size;\n    }\n    toPaths(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.defaultOptions;\n        const paths = [];\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path':\n                    path = {\n                        d: this.opsToPath(drawing),\n                        stroke: o.stroke,\n                        strokeWidth: o.strokeWidth,\n                        fill: 'none'\n                    };\n                    break;\n                case 'fillPath':\n                    path = {\n                        d: this.opsToPath(drawing),\n                        stroke: 'none',\n                        strokeWidth: 0,\n                        fill: o.fill || 'none'\n                    };\n                    break;\n                case 'fillSketch':\n                    path = this.fillSketch(drawing, o);\n                    break;\n                case 'path2Dfill':\n                    path = {\n                        d: drawing.path || '',\n                        stroke: 'none',\n                        strokeWidth: 0,\n                        fill: o.fill || 'none'\n                    };\n                    break;\n                case 'path2Dpattern': {\n                    const size = drawing.size;\n                    const pattern = {\n                        x: 0, y: 0, width: 1, height: 1,\n                        viewBox: `0 0 ${Math.round(size[0])} ${Math.round(size[1])}`,\n                        patternUnits: 'objectBoundingBox',\n                        path: this.fillSketch(drawing, o)\n                    };\n                    path = {\n                        d: drawing.path,\n                        stroke: 'none',\n                        strokeWidth: 0,\n                        pattern: pattern\n                    };\n                    break;\n                }\n            }\n            if (path) {\n                paths.push(path);\n            }\n        }\n        return paths;\n    }\n    fillSketch(drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        return {\n            d: this.opsToPath(drawing),\n            stroke: o.fill || 'none',\n            strokeWidth: fweight,\n            fill: 'none'\n        };\n    }\n    opsToPath(drawing) {\n        let path = '';\n        for (const item of drawing.ops) {\n            const data = item.data;\n            switch (item.op) {\n                case 'move':\n                    path += `M${data[0]} ${data[1]} `;\n                    break;\n                case 'bcurveTo':\n                    path += `C${data[0]} ${data[1]}, ${data[2]} ${data[3]}, ${data[4]} ${data[5]} `;\n                    break;\n                case 'qcurveTo':\n                    path += `Q${data[0]} ${data[1]}, ${data[2]} ${data[3]} `;\n                    break;\n                case 'lineTo':\n                    path += `L${data[0]} ${data[1]} `;\n                    break;\n            }\n        }\n        return path.trim();\n    }\n}\n","import { RoughGeneratorBase } from './generator-base';\nexport class RoughGenerator extends RoughGeneratorBase {\n    constructor(config, surface) {\n        super(config, surface);\n    }\n    line(x1, y1, x2, y2, options) {\n        const o = this._options(options);\n        return this._drawable('line', [this.lib.line(x1, y1, x2, y2, o)], o);\n    }\n    rectangle(x, y, width, height, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            const points = [[x, y], [x + width, y], [x + width, y + height], [x, y + height]];\n            if (o.fillStyle === 'solid') {\n                paths.push(this.lib.solidFillPolygon(points, o));\n            }\n            else {\n                paths.push(this.lib.patternFillPolygon(points, o));\n            }\n        }\n        paths.push(this.lib.rectangle(x, y, width, height, o));\n        return this._drawable('rectangle', paths, o);\n    }\n    ellipse(x, y, width, height, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = this.lib.ellipse(x, y, width, height, o);\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(this.lib.patternFillEllipse(x, y, width, height, o));\n            }\n        }\n        paths.push(this.lib.ellipse(x, y, width, height, o));\n        return this._drawable('ellipse', paths, o);\n    }\n    circle(x, y, diameter, options) {\n        const ret = this.ellipse(x, y, diameter, diameter, options);\n        ret.shape = 'circle';\n        return ret;\n    }\n    linearPath(points, options) {\n        const o = this._options(options);\n        return this._drawable('linearPath', [this.lib.linearPath(points, false, o)], o);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (closed && o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = this.lib.arc(x, y, width, height, start, stop, true, false, o);\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(this.lib.patternFillArc(x, y, width, height, start, stop, o));\n            }\n        }\n        paths.push(this.lib.arc(x, y, width, height, start, stop, closed, true, o));\n        return this._drawable('arc', paths, o);\n    }\n    curve(points, options) {\n        const o = this._options(options);\n        return this._drawable('curve', [this.lib.curve(points, o)], o);\n    }\n    polygon(points, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                paths.push(this.lib.solidFillPolygon(points, o));\n            }\n            else {\n                const size = this.computePolygonSize(points);\n                const fillPoints = [\n                    [0, 0],\n                    [size[0], 0],\n                    [size[0], size[1]],\n                    [0, size[1]]\n                ];\n                const shape = this.lib.patternFillPolygon(fillPoints, o);\n                shape.type = 'path2Dpattern';\n                shape.size = size;\n                shape.path = this.polygonPath(points);\n                paths.push(shape);\n            }\n        }\n        paths.push(this.lib.linearPath(points, true, o));\n        return this._drawable('polygon', paths, o);\n    }\n    path(d, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (!d) {\n            return this._drawable('path', paths, o);\n        }\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = { type: 'path2Dfill', path: d, ops: [] };\n                paths.push(shape);\n            }\n            else {\n                const size = this.computePathSize(d);\n                const points = [\n                    [0, 0],\n                    [size[0], 0],\n                    [size[0], size[1]],\n                    [0, size[1]]\n                ];\n                const shape = this.lib.patternFillPolygon(points, o);\n                shape.type = 'path2Dpattern';\n                shape.size = size;\n                shape.path = d;\n                paths.push(shape);\n            }\n        }\n        paths.push(this.lib.svgPath(d, o));\n        return this._drawable('path', paths, o);\n    }\n}\n","import { RoughRenderer } from './renderer';\nconst hasDocument = typeof document !== 'undefined';\nexport class RoughCanvasBase {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext('2d');\n    }\n    static createRenderer() {\n        return new RoughRenderer();\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const ctx = this.ctx;\n        for (const drawing of sets) {\n            switch (drawing.type) {\n                case 'path':\n                    ctx.save();\n                    ctx.strokeStyle = o.stroke;\n                    ctx.lineWidth = o.strokeWidth;\n                    this._drawToContext(ctx, drawing);\n                    ctx.restore();\n                    break;\n                case 'fillPath':\n                    ctx.save();\n                    ctx.fillStyle = o.fill || '';\n                    this._drawToContext(ctx, drawing);\n                    ctx.restore();\n                    break;\n                case 'fillSketch':\n                    this.fillSketch(ctx, drawing, o);\n                    break;\n                case 'path2Dfill': {\n                    this.ctx.save();\n                    this.ctx.fillStyle = o.fill || '';\n                    const p2d = new Path2D(drawing.path);\n                    this.ctx.fill(p2d);\n                    this.ctx.restore();\n                    break;\n                }\n                case 'path2Dpattern': {\n                    const doc = this.canvas.ownerDocument || (hasDocument && document);\n                    if (doc) {\n                        const size = drawing.size;\n                        const hcanvas = doc.createElement('canvas');\n                        const hcontext = hcanvas.getContext('2d');\n                        const bbox = this.computeBBox(drawing.path);\n                        if (bbox && (bbox.width || bbox.height)) {\n                            hcanvas.width = this.canvas.width;\n                            hcanvas.height = this.canvas.height;\n                            hcontext.translate(bbox.x || 0, bbox.y || 0);\n                        }\n                        else {\n                            hcanvas.width = size[0];\n                            hcanvas.height = size[1];\n                        }\n                        this.fillSketch(hcontext, drawing, o);\n                        this.ctx.save();\n                        this.ctx.fillStyle = this.ctx.createPattern(hcanvas, 'repeat');\n                        const p2d = new Path2D(drawing.path);\n                        this.ctx.fill(p2d);\n                        this.ctx.restore();\n                    }\n                    else {\n                        console.error('Cannot render path2Dpattern. No defs/document defined.');\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    computeBBox(d) {\n        if (hasDocument) {\n            try {\n                const ns = 'http://www.w3.org/2000/svg';\n                const svg = document.createElementNS(ns, 'svg');\n                svg.setAttribute('width', '0');\n                svg.setAttribute('height', '0');\n                const pathNode = self.document.createElementNS(ns, 'path');\n                pathNode.setAttribute('d', d);\n                svg.appendChild(pathNode);\n                document.body.appendChild(svg);\n                const bbox = pathNode.getBBox();\n                document.body.removeChild(svg);\n                return bbox;\n            }\n            catch (err) { }\n        }\n        return null;\n    }\n    fillSketch(ctx, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        ctx.save();\n        ctx.strokeStyle = o.fill || '';\n        ctx.lineWidth = fweight;\n        this._drawToContext(ctx, drawing);\n        ctx.restore();\n    }\n    _drawToContext(ctx, drawing) {\n        ctx.beginPath();\n        for (const item of drawing.ops) {\n            const data = item.data;\n            switch (item.op) {\n                case 'move':\n                    ctx.moveTo(data[0], data[1]);\n                    break;\n                case 'bcurveTo':\n                    ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n                    break;\n                case 'qcurveTo':\n                    ctx.quadraticCurveTo(data[0], data[1], data[2], data[3]);\n                    break;\n                case 'lineTo':\n                    ctx.lineTo(data[0], data[1]);\n                    break;\n            }\n        }\n        if (drawing.type === 'fillPath') {\n            ctx.fill();\n        }\n        else {\n            ctx.stroke();\n        }\n    }\n}\n","import { RoughGenerator } from './generator';\nimport { RoughCanvasBase } from './canvas-base';\nexport class RoughCanvas extends RoughCanvasBase {\n    constructor(canvas, config) {\n        super(canvas);\n        this.gen = new RoughGenerator(config || null, this.canvas);\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        this.draw(d);\n        return d;\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        this.draw(d);\n        return d;\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        this.draw(d);\n        return d;\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        this.draw(d);\n        return d;\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        this.draw(d);\n        return d;\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        this.draw(d);\n        return d;\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        this.draw(drawing);\n        return drawing;\n    }\n}\n","import { RoughGeneratorBase } from './generator-base';\nexport class RoughGeneratorAsync extends RoughGeneratorBase {\n    async line(x1, y1, x2, y2, options) {\n        const o = this._options(options);\n        return this._drawable('line', [await this.lib.line(x1, y1, x2, y2, o)], o);\n    }\n    async rectangle(x, y, width, height, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            const points = [[x, y], [x + width, y], [x + width, y + height], [x, y + height]];\n            if (o.fillStyle === 'solid') {\n                paths.push(await this.lib.solidFillPolygon(points, o));\n            }\n            else {\n                paths.push(await this.lib.patternFillPolygon(points, o));\n            }\n        }\n        paths.push(await this.lib.rectangle(x, y, width, height, o));\n        return this._drawable('rectangle', paths, o);\n    }\n    async ellipse(x, y, width, height, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = await this.lib.ellipse(x, y, width, height, o);\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(await this.lib.patternFillEllipse(x, y, width, height, o));\n            }\n        }\n        paths.push(await this.lib.ellipse(x, y, width, height, o));\n        return this._drawable('ellipse', paths, o);\n    }\n    async circle(x, y, diameter, options) {\n        const ret = await this.ellipse(x, y, diameter, diameter, options);\n        ret.shape = 'circle';\n        return ret;\n    }\n    async linearPath(points, options) {\n        const o = this._options(options);\n        return this._drawable('linearPath', [await this.lib.linearPath(points, false, o)], o);\n    }\n    async arc(x, y, width, height, start, stop, closed = false, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (closed && o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = await this.lib.arc(x, y, width, height, start, stop, true, false, o);\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(await this.lib.patternFillArc(x, y, width, height, start, stop, o));\n            }\n        }\n        paths.push(await this.lib.arc(x, y, width, height, start, stop, closed, true, o));\n        return this._drawable('arc', paths, o);\n    }\n    async curve(points, options) {\n        const o = this._options(options);\n        return this._drawable('curve', [await this.lib.curve(points, o)], o);\n    }\n    async polygon(points, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                paths.push(await this.lib.solidFillPolygon(points, o));\n            }\n            else {\n                const size = this.computePolygonSize(points);\n                const fillPoints = [\n                    [0, 0],\n                    [size[0], 0],\n                    [size[0], size[1]],\n                    [0, size[1]]\n                ];\n                const shape = await this.lib.patternFillPolygon(fillPoints, o);\n                shape.type = 'path2Dpattern';\n                shape.size = size;\n                shape.path = this.polygonPath(points);\n                paths.push(shape);\n            }\n        }\n        paths.push(await this.lib.linearPath(points, true, o));\n        return this._drawable('polygon', paths, o);\n    }\n    async path(d, options) {\n        const o = this._options(options);\n        const paths = [];\n        if (!d) {\n            return this._drawable('path', paths, o);\n        }\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = { type: 'path2Dfill', path: d, ops: [] };\n                paths.push(shape);\n            }\n            else {\n                const size = this.computePathSize(d);\n                const points = [\n                    [0, 0],\n                    [size[0], 0],\n                    [size[0], size[1]],\n                    [0, size[1]]\n                ];\n                const shape = await this.lib.patternFillPolygon(points, o);\n                shape.type = 'path2Dpattern';\n                shape.size = size;\n                shape.path = d;\n                paths.push(shape);\n            }\n        }\n        paths.push(await this.lib.svgPath(d, o));\n        return this._drawable('path', paths, o);\n    }\n}\n","import { RoughGeneratorAsync } from './generator-async';\nimport { RoughCanvasBase } from './canvas-base';\nexport class RoughCanvasAsync extends RoughCanvasBase {\n    constructor(canvas, config) {\n        super(canvas);\n        this.genAsync = new RoughGeneratorAsync(config || null, this.canvas);\n    }\n    get generator() {\n        return this.genAsync;\n    }\n    getDefaultOptions() {\n        return this.genAsync.defaultOptions;\n    }\n    async line(x1, y1, x2, y2, options) {\n        const d = await this.genAsync.line(x1, y1, x2, y2, options);\n        this.draw(d);\n        return d;\n    }\n    async rectangle(x, y, width, height, options) {\n        const d = await this.genAsync.rectangle(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    async ellipse(x, y, width, height, options) {\n        const d = await this.genAsync.ellipse(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    async circle(x, y, diameter, options) {\n        const d = await this.genAsync.circle(x, y, diameter, options);\n        this.draw(d);\n        return d;\n    }\n    async linearPath(points, options) {\n        const d = await this.genAsync.linearPath(points, options);\n        this.draw(d);\n        return d;\n    }\n    async polygon(points, options) {\n        const d = await this.genAsync.polygon(points, options);\n        this.draw(d);\n        return d;\n    }\n    async arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = await this.genAsync.arc(x, y, width, height, start, stop, closed, options);\n        this.draw(d);\n        return d;\n    }\n    async curve(points, options) {\n        const d = await this.genAsync.curve(points, options);\n        this.draw(d);\n        return d;\n    }\n    async path(d, options) {\n        const drawing = await this.genAsync.path(d, options);\n        this.draw(drawing);\n        return drawing;\n    }\n}\n","import { RoughRenderer } from './renderer';\nconst hasDocument = typeof document !== 'undefined';\nexport class RoughSVGBase {\n    constructor(svg) {\n        this.svg = svg;\n    }\n    static createRenderer() {\n        return new RoughRenderer();\n    }\n    get defs() {\n        const doc = this.svg.ownerDocument || (hasDocument && document);\n        if (doc) {\n            if (!this._defs) {\n                const dnode = doc.createElementNS('http://www.w3.org/2000/svg', 'defs');\n                if (this.svg.firstChild) {\n                    this.svg.insertBefore(dnode, this.svg.firstChild);\n                }\n                else {\n                    this.svg.appendChild(dnode);\n                }\n                this._defs = dnode;\n            }\n        }\n        return this._defs || null;\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || (hasDocument && document);\n        const g = doc.createElementNS('http://www.w3.org/2000/svg', 'g');\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = o.stroke;\n                    path.style.strokeWidth = o.strokeWidth + '';\n                    path.style.fill = 'none';\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || null;\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n                case 'path2Dfill': {\n                    path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    path.setAttribute('d', drawing.path || '');\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || null;\n                    break;\n                }\n                case 'path2Dpattern': {\n                    if (!this.defs) {\n                        console.error('Cannot render path2Dpattern. No defs/document defined.');\n                    }\n                    else {\n                        const size = drawing.size;\n                        const pattern = doc.createElementNS('http://www.w3.org/2000/svg', 'pattern');\n                        const id = `rough-${Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER || 999999))}`;\n                        pattern.setAttribute('id', id);\n                        pattern.setAttribute('x', '0');\n                        pattern.setAttribute('y', '0');\n                        pattern.setAttribute('width', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('viewBox', `0 0 ${Math.round(size[0])} ${Math.round(size[1])}`);\n                        pattern.setAttribute('patternUnits', 'objectBoundingBox');\n                        const patternPath = this.fillSketch(doc, drawing, o);\n                        pattern.appendChild(patternPath);\n                        this.defs.appendChild(pattern);\n                        path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        path.setAttribute('d', drawing.path || '');\n                        path.style.stroke = 'none';\n                        path.style.strokeWidth = '0';\n                        path.style.fill = `url(#${id})`;\n                    }\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', this.opsToPath(drawing));\n        path.style.stroke = o.fill || null;\n        path.style.strokeWidth = fweight + '';\n        path.style.fill = 'none';\n        return path;\n    }\n}\n","import { RoughGenerator } from './generator';\nimport { RoughSVGBase } from './svg-base';\nexport class RoughSVG extends RoughSVGBase {\n    constructor(svg, config) {\n        super(svg);\n        this.gen = new RoughGenerator(config || null, this.svg);\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing) {\n        return this.gen.opsToPath(drawing);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n","import { RoughGeneratorAsync } from './generator-async';\nimport { RoughSVGBase } from './svg-base';\nexport class RoughSVGAsync extends RoughSVGBase {\n    constructor(svg, config) {\n        super(svg);\n        this.genAsync = new RoughGeneratorAsync(config || null, this.svg);\n    }\n    get generator() {\n        return this.genAsync;\n    }\n    getDefaultOptions() {\n        return this.genAsync.defaultOptions;\n    }\n    opsToPath(drawing) {\n        return this.genAsync.opsToPath(drawing);\n    }\n    async line(x1, y1, x2, y2, options) {\n        const d = await this.genAsync.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    async rectangle(x, y, width, height, options) {\n        const d = await this.genAsync.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    async ellipse(x, y, width, height, options) {\n        const d = await this.genAsync.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    async circle(x, y, diameter, options) {\n        const d = await this.genAsync.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    async linearPath(points, options) {\n        const d = await this.genAsync.linearPath(points, options);\n        return this.draw(d);\n    }\n    async polygon(points, options) {\n        const d = await this.genAsync.polygon(points, options);\n        return this.draw(d);\n    }\n    async arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = await this.genAsync.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    async curve(points, options) {\n        const d = await this.genAsync.curve(points, options);\n        return this.draw(d);\n    }\n    async path(d, options) {\n        const drawing = await this.genAsync.path(d, options);\n        return this.draw(drawing);\n    }\n}\n","import { RoughCanvas } from './canvas';\nimport { RoughGenerator } from './generator';\nimport { RoughGeneratorAsync } from './generator-async';\nimport { RoughCanvasAsync } from './canvas-async';\nimport { RoughSVG } from './svg';\nimport { RoughSVGAsync } from './svg-async';\nexport default {\n    canvas(canvas, config) {\n        if (config && config.async) {\n            return new RoughCanvasAsync(canvas, config);\n        }\n        return new RoughCanvas(canvas, config);\n    },\n    svg(svg, config) {\n        if (config && config.async) {\n            return new RoughSVGAsync(svg, config);\n        }\n        return new RoughSVG(svg, config);\n    },\n    createRenderer() {\n        return RoughCanvas.createRenderer();\n    },\n    generator(config, surface) {\n        if (config && config.async) {\n            return new RoughGeneratorAsync(config, surface);\n        }\n        return new RoughGenerator(config, surface);\n    }\n};\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (typeof obj === 'undefined') {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","import rough from 'roughjs';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\n\nvar getLines = function (_a) {\n    var layer = _a.layer, cells = _a.cells, previousLayerCells = _a.previousLayerCells;\n    var lines = [];\n    if (!previousLayerCells) {\n        return lines;\n    }\n    for (var i = 0; i < cells.length; i++) {\n        for (var j = 0; j < previousLayerCells.length; j++) {\n            var cell = cells[i];\n            var previousCell = previousLayerCells[j];\n            var points = [\n                cell,\n                previousCell,\n            ];\n            var line = {\n                layer: layer,\n                points: points,\n            };\n            lines.push(line);\n        }\n    }\n    return lines;\n};\n\nvar Color = require('color');\nvar COLORS = [\n    Color.hsl([199, 100, 57]),\n    Color.hsl([33, 100, 50]),\n];\nvar DEFAULT_DIAMETER = 84;\nvar EXTRA_PADDING = 5;\nvar DEFAULT_FILL = 'rgb(255,255,255)';\nvar DEFAULT_FILL_WEIGHT = 5;\nvar DEFAULT_FILL_STYLE = 'solid';\nvar DEFAULT_STROKE_WIDTH = 3;\nvar DEFAULT_LINE_WIDTH = 3;\nvar DEFAULT_ROUGHNESS = 0.5;\nvar DEFAULT_BOWING = 0;\n\nvar getPosition = function (index, size, len) {\n    if (len === 1) {\n        return size / 2;\n    }\n    var total = len - 1;\n    var mult = (size / total);\n    return mult * index;\n};\n\nvar getRange = function (num, orig, target) {\n    var perc = (num - orig[0]) / (orig[1] - orig[0]);\n    return perc * (target[1] - target[0]) + target[0];\n};\n\nvar getCellPosition = function (_a) {\n    var i = _a.i, strokeWidth = _a.strokeWidth, diameter = _a.diameter, maxCells = _a.maxCells, vertical = _a.vertical, layerPosition = _a.layerPosition, layerSize = _a.layerSize, units = _a.units;\n    var extraAmount = 1200 / (Math.pow(maxCells, 2));\n    var extraPadding = extraAmount * (maxCells - units);\n    var pad = (diameter * .5 + strokeWidth + EXTRA_PADDING) + extraPadding;\n    var position = getRange(getPosition(i, layerSize, units), [0, layerSize], [pad, layerSize - pad]);\n    if (vertical) {\n        return {\n            x: position,\n            y: layerPosition,\n        };\n    }\n    return {\n        x: layerPosition,\n        y: position,\n    };\n};\nvar getCells = function (_a) {\n    var units = _a.units, layer = _a.layer, props = __rest(_a, [\"units\", \"layer\"])\n    // diameter,\n    // maxCells,\n    // layerPosition,\n    // layerSize,\n    // vertical,\n    // strokeWidth,\n    ;\n    var points = [];\n    for (var i = 0; i < units; i++) {\n        var position = getCellPosition(__assign({ i: i,\n            units: units,\n            layer: layer }, props));\n        points.push(__assign({ layer: layer }, position));\n    }\n    return points;\n};\n\nvar getLayer = function (_a) {\n    var layer = _a.index, layerPosition = _a.layerPosition, maxCells = _a.maxCells, layerSize = _a.layerSize, vertical = _a.vertical, _b = _a.layer, units = _b.units, diameter = _b.diameter, strokeWidth = _b.strokeWidth, previousLayerCells = _a.previousLayerCells;\n    var cells = getCells({\n        strokeWidth: strokeWidth,\n        units: parseInt(\"\" + units, 10),\n        layer: layer,\n        diameter: diameter,\n        layerPosition: layerPosition,\n        maxCells: maxCells,\n        layerSize: layerSize,\n        vertical: vertical,\n    });\n    var lines = getLines({\n        layer: layer,\n        cells: cells,\n        previousLayerCells: previousLayerCells,\n    });\n    return {\n        cells: cells,\n        lines: lines,\n    };\n};\n\nvar getCellsAndLines = function (_a) {\n    var _b = _a.network, layers = _b.layers, vertical = _b.vertical, width = _a.width, height = _a.height, props = __rest(_a, [\"network\", \"width\", \"height\"]);\n    var maxCells = layers.reduce(function (max, layer) {\n        var units = parseInt(\"\" + layer.units, 10);\n        return max < units ? units : max;\n    }, 0);\n    var size = vertical ? height : width;\n    var previousLayerCells = null;\n    var start = (layers[0].diameter / 2) + layers[0].strokeWidth + EXTRA_PADDING;\n    var lastLayer = layers[layers.length - 1];\n    var end = size - ((lastLayer.diameter / 2) + lastLayer.strokeWidth) - EXTRA_PADDING;\n    return layers.reduce(function (obj, layer, index) {\n        var layerPosition = getRange(getPosition(index, size, layers.length), [0, size], [start, end]);\n        var _a = getLayer(__assign({ index: index,\n            layerPosition: layerPosition,\n            maxCells: maxCells, layerSize: vertical ? width : height, vertical: vertical,\n            layer: layer,\n            previousLayerCells: previousLayerCells }, props)), cells = _a.cells, \n        // Component,\n        lines = _a.lines;\n        previousLayerCells = cells;\n        return {\n            lines: obj.lines.concat(lines),\n            cells: obj.cells.concat(cells),\n        };\n    }, {\n        lines: [],\n        cells: [],\n    });\n};\n\nvar parseProps = function (_a) {\n    var network = _a.network, props = __rest(_a, [\"network\"]);\n    return (__assign({}, props, { network: __assign({}, network, { layers: network.layers.map(function (layer) { return (__assign({}, layer, { diameter: layer.diameter || network.diameter || DEFAULT_DIAMETER, fill: layer.fill || network.fill || DEFAULT_FILL, fillWeight: layer.fillWeight || network.fillWeight || DEFAULT_FILL_WEIGHT, fillStyle: layer.fillStyle || network.fillStyle || DEFAULT_FILL_STYLE, strokeWidth: layer.strokeWidth || network.strokeWidth || DEFAULT_STROKE_WIDTH, lineWidth: layer.lineWidth || network.lineWidth || DEFAULT_LINE_WIDTH, roughness: layer.roughness || network.roughness || DEFAULT_ROUGHNESS, bowing: layer.bowing || network.bowing || DEFAULT_BOWING })); }) }) }));\n};\nvar NNVisualizer = /** @class */ (function () {\n    function NNVisualizer(target, props) {\n        var _this = this;\n        this.animating = false;\n        this.render = function (roughness) {\n            var rc = rough.canvas(_this.canvas);\n            _this.lines.forEach(function (line) {\n                var layer = _this.network.layers[line.layer];\n                rc.line(line.points[0].x, line.points[0].y, line.points[1].x, line.points[1].y, __assign({}, layer, { roughness: roughness || layer.roughness, strokeWidth: layer.lineWidth }));\n            });\n            _this.cells.forEach(function (cell) {\n                var layer = _this.network.layers[cell.layer];\n                rc.circle(cell.x, cell.y, layer.diameter, __assign({}, layer, { roughness: roughness || layer.roughness }));\n            });\n        };\n        this.animate = function (_a) {\n            var _b = _a === void 0 ? {} : _a, animateInterval = _b.animateInterval, roughness = _b.roughness;\n            _this.animating = true;\n            var render = function () {\n                _this.render(getRand(roughness));\n                setInterval(function () {\n                    render();\n                }, animateInterval || 100);\n            };\n            render();\n        };\n        this.stopAnimating = function () {\n            _this.animating = false;\n        };\n        var width = props.width, height = props.height;\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = width;\n        this.canvas.height = height;\n        target.appendChild(this.canvas);\n        var parsedProps = parseProps(props);\n        this.network = parsedProps.network;\n        var _a = getCellsAndLines(parsedProps), lines = _a.lines, cells = _a.cells;\n        this.lines = lines;\n        this.cells = cells;\n        this.render();\n    }\n    return NNVisualizer;\n}());\nvar getRand = function (range) { return range[0] + (Math.random() * (range[1] - range[0])); };\n\nexport default NNVisualizer;\n","import NNVisualizer from '../dist';\nconst Color = require('color');\n\nexport const COLORS = [\n  Color.hsl([199, 100, 57]),\n  Color.hsl([33, 100, 50]),\n];\n\nconst root = document.getElementById('root');\nwhile (root.firstChild) {\n  root.removeChild(root.firstChild);\n}\n\nconst nn = new NNVisualizer(root, {\n  width: 800,\n  height: 600,\n  network: {\n    vertical: false,\n    roughness: 5.5,\n    layers: [\n      {\n        units: \"1\",\n        fill: COLORS[0],\n        stroke: 'black',\n      },\n      {\n        units: 4,\n        fill: COLORS[1],\n        stroke: 'black',\n      },\n      {\n        units: 2,\n        fill: COLORS[0],\n        stroke: 'black',\n      },\n    ],\n  },\n});\n\n// nn.animate({\n//   animateInterval: 100,\n//   roughness: [1, 1.2],\n// });\n"]}